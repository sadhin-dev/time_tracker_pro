{
  "package_name": "com.walturn.my_app",
  "project_description": "A Flutter application utilizing Bloc/Cubit architecture to create a modular mobile experience, focusing on attendance tracking. The app features a startup screen, dynamic data import from Excel files, and comprehensive state management for tracking employee attendance and late arrivals.",
  "architecture_overview": "Implemented using Flutter Bloc/Cubit architecture pattern with clear separation of concerns. The application leverages Cubit classes for state management, using Equatable for efficient state comparisons. Key features include Excel data parsing, attendance tracking, and responsive UI components with flexible navigation.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Main application entry point that configures and initializes the Flutter app with theme settings and initial screen. This file serves as the root widget that bootstraps the entire application.",
      "class_diagram": "@startuml\nclass App {\n  +Widget build(BuildContext context)\n}\nnote right: Main application widget that sets up\ntheme, routing, and initial screen\nApp --> MaterialApp : creates\nApp --> StartupView : navigates to\nApp --> ThemeData : configures\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the main MaterialApp widget with theme configuration and sets the initial home screen",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/startup/startup_view.dart",
        "package:my_app/shared/app_colors.dart"
      ]
    },
    {
      "name": "lib/features/home/home_cubit.dart",
      "description": "\u26a0\ufe0f TEMPLATE: A template Cubit for the Home screen that demonstrates basic Bloc/Cubit pattern with state management. Contains counter functionality as an example. This file should be completely replaced with actual business logic specific to your app's home screen requirements.",
      "class_diagram": "@startuml\nclass HomeCubit {\n  +incrementCounter()\n  +resetCounter()\n  -_loadInitialData()\n}\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "\u26a0\ufe0f TEMPLATE: Increments the counter state - replace with actual business logic",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "resetCounter",
          "description": "\u26a0\ufe0f TEMPLATE: Resets the counter to zero - replace with actual business logic",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "_loadInitialData",
          "description": "\u26a0\ufe0f TEMPLATE: Initializes the cubit with default state - replace with actual data loading",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "flutter_bloc/flutter_bloc.dart",
        "my_app/features/home/home_state.dart"
      ]
    },
    {
      "name": "lib/features/home/home_state.dart",
      "description": "\u26a0\ufe0f TEMPLATE: State classes for the Home feature using Equatable for efficient state comparisons. Contains example states (HomeInitial, HomeLoaded) that should be replaced with actual state classes specific to your app's home screen needs.",
      "class_diagram": "@startuml\nabstract class HomeState {\n  +props: List<Object>\n}\nclass HomeInitial extends HomeState\nclass HomeLoaded extends HomeState {\n  +counter: int\n}\n@enduml",
      "methods": [
        {
          "name": "props",
          "description": "\u26a0\ufe0f TEMPLATE: Equatable property for state comparison - adapt to your actual state properties",
          "parameters": null,
          "return_type": "List<Object>"
        }
      ],
      "dependencies": [
        "equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "A placeholder UI view for the home screen that displays a warning message indicating it should not be accessible. This serves as a fallback or error state view when navigation to the home screen occurs incorrectly.",
      "class_diagram": "@startuml\nclass HomeView {\n  +Widget build(BuildContext context)\n}\nnote right of HomeView\n  StatelessWidget\n  Purpose: Placeholder view showing inaccessible state\nend note\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the UI widget tree for the home view, displaying a centered warning message",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "This file contains the StartupView widget which serves as the application's splash screen and initial routing mechanism. It displays a branded loading screen for 1 second before automatically navigating to the main attendance tracking feature.",
      "class_diagram": "@startuml\nclass StartupView {\n  +State<StartupView> createState()\n}\n\nclass _StartupViewState {\n  -void _navigateToAttendance()\n  +Widget build(BuildContext context)\n}\n\nStartupView -- _StartupViewState\nclass AttendanceView\n_StartupViewState ..> AttendanceView : navigates to\n@enduml",
      "methods": [
        {
          "name": "createState",
          "description": "Creates the state object for the StartupView widget",
          "parameters": null,
          "return_type": "State<StartupView>"
        },
        {
          "name": "_navigateToAttendance",
          "description": "Handles automatic navigation from splash screen to attendance view after a 1-second delay",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "build",
          "description": "Builds the UI for the splash screen with branding and loading indicator",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/features/attendance/attendance_view.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "Provides a centralized bootstrapping mechanism for initializing the Flutter application with support for different flavors, configuration setup, and error tracking",
      "class_diagram": "@startuml\nclass Bootstrap {\n  +{static} bootstrap(builder: Function, flavor: Flavor)\n  -setupInitialConfiguration()\n  -initializeErrorTracking()\n}\n@enduml",
      "methods": [
        {
          "name": "bootstrap",
          "description": "Primary initialization method for the application, responsible for setting up app configurations, dependency injection, and error tracking",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "flutter/material.dart",
        "flutter/services.dart",
        "my_app/models/enums/flavor.dart",
        "my_app/utils/flavors.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This file is responsible for bootstrapping the production version of the application. It sets up the initial state and configuration for the app, ensuring it runs in the production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The entry point of the application. It calls the `bootstrap` function to initialize the app and render the `App` widget.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/app/app.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the Flutter application. It sets up the application's entry point and configures the application flavor to be 'development'.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application that initializes the development build of the app.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/app/app.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This file defines an enum called `Flavor` with two values: `production` and `development`. It represents the different flavors or environments that the application can run in.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/utils/flavors.dart",
      "description": "Manages application flavor configuration, allowing runtime identification of deployment environment (development vs production) to enable environment-specific behaviors and configurations",
      "class_diagram": "@startuml\nclass Flavors {\n  +{static} flavor: Flavor\n  +{static} isDev: bool\n  +{static} isProd: bool\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors",
          "description": "Private singleton constructor to ensure single flavor configuration instance",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "isDev",
          "description": "Checks if current application flavor is development environment",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "Checks if current application flavor is production environment",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/shared/app_colors.dart",
      "description": "A comprehensive color management file that defines a modern, sophisticated color palette for the entire application, providing consistent styling and theming across different UI components and supporting both light and dark modes.",
      "class_diagram": "@startuml\nclass AppColors {\n  + {static} kcPrimaryColor\n  + {static} kcSecondaryColor\n  + {static} kcPrimaryGradient\n}\n@enduml",
      "methods": [
        {
          "name": "N/A",
          "description": "Constants file with predefined color and gradient definitions",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart"
      ]
    },
    {
      "name": "lib/shared/button.dart",
      "description": "A reusable custom button component that provides different visual variants (primary, secondary, outline) with consistent styling across the application.",
      "class_diagram": "@startuml\nclass CustomButton {\n  +text: String\n  +onPressed: VoidCallback?\n  +variant: ButtonVariant\n  +icon: IconData?\n  +build(): Widget\n}\nenum ButtonVariant {\n  primary\n  secondary\n  outline\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders the custom button with specified variant styling and optional icon",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/shared/app_colors.dart"
      ]
    },
    {
      "name": "lib/shared/card.dart",
      "description": "A customizable card component library providing flexible card implementations for Flutter applications with various styling options.",
      "class_diagram": "@startuml\nclass CustomCard {\n  +child: Widget\n  +onTap: VoidCallback?\n  +build(): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders a customizable card widget with optional tap functionality",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart"
      ]
    },
    {
      "name": "lib/shared/tab_bar.dart",
      "description": "A customizable tab bar component for navigation with modern UI design and interactive features.",
      "class_diagram": "@startuml\nclass CustomTabBar {\n  +tabs: List<String>\n  +selectedIndex: int\n  +onTabSelected: ValueChanged<int>\n  +build(): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Renders the tab bar with animated indicators and custom styling",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "flutter/material.dart"
      ]
    },
    {
      "name": "lib/shared/text_style.dart",
      "description": "This file defines a centralized set of text styles used throughout the application. It provides consistent typography by encapsulating font sizes, weights, colors and other text properties in reusable functions. This ensures uniform text appearance across different screens and components while making it easy to update styles globally.",
      "class_diagram": "classDiagram\n    class TextStyles {\n        +heading1Style(context) TextStyle\n        +heading2Style(context) TextStyle\n        +heading3Style(context) TextStyle\n        +bodyStyle(context) TextStyle\n        +bodySmallStyle(context) TextStyle\n        +buttonStyle(context) TextStyle\n        +linkStyle(context) TextStyle\n        +errorStyle(context) TextStyle\n        +successStyle(context) TextStyle\n        +subtitleStyle(context) TextStyle\n    }\n\n    class AppColors {\n        <<dependency>>\n    }\n\n    TextStyles --> AppColors : uses\n",
      "methods": [
        {
          "name": "heading1Style",
          "description": "Returns the largest heading text style with bold weight and primary text color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "heading2Style",
          "description": "Returns a medium heading text style with semi-bold weight and primary text color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "heading3Style",
          "description": "Returns a smaller heading text style with semi-bold weight and primary text color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "bodyStyle",
          "description": "Returns the standard body text style with regular weight and primary text color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "bodySmallStyle",
          "description": "Returns a smaller body text style with regular weight and secondary text color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "buttonStyle",
          "description": "Returns the standard button text style with medium bold weight and white color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "linkStyle",
          "description": "Returns a link text style with underlined decoration in primary color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "errorStyle",
          "description": "Returns an error message text style with error color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "successStyle",
          "description": "Returns a success message text style with success color",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        },
        {
          "name": "subtitleStyle",
          "description": "Legacy alias for bodySmallStyle - returns smaller body text style",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "TextStyle"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/shared/app_colors.dart"
      ]
    },
    {
      "name": "lib/shared/ui_helpers.dart",
      "description": "A utility file providing responsive UI sizing and spacing helpers for consistent layout across different screen sizes in a Flutter application.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + {static} screenWidth()\n  + {static} screenHeight()\n  + {static} spacing\n}\n@enduml",
      "methods": [
        {
          "name": "screenWidth",
          "description": "Retrieves the total screen width for the current device context",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeight",
          "description": "Retrieves the total screen height for the current device context",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "flutter/material.dart"
      ]
    },
    {
      "name": "lib/services/firebase_auth_service.dart",
      "description": "\u26a0\ufe0f TEMPLATE: Commented template for Firebase Authentication service. This file is entirely commented out and should only be uncommented when Firebase Authentication is needed in the project. Contains template authentication methods and setup instructions.",
      "class_diagram": "@startuml\nnote as N1\n  File is completely commented out\n  Uncomment when Firebase Auth is needed\nend note\n@enduml",
      "methods": [],
      "dependencies": [
        "firebase_auth/firebase_auth.dart (commented)"
      ]
    },
    {
      "name": "lib/services/firestore_service.dart",
      "description": "\u26a0\ufe0f TEMPLATE: Commented template for Firestore database service. This file is entirely commented out and should only be uncommented when Firestore database functionality is needed in the project. Contains template CRUD operations and setup instructions.",
      "class_diagram": "@startuml\nnote as N1\n  File is completely commented out\n  Uncomment when Firestore is needed\nend note\n@enduml",
      "methods": [],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart (commented)"
      ]
    },
    {
      "name": "lib/features/attendance/attendance_state.dart",
      "description": "Defines the state management classes for the attendance feature, representing different states of attendance data loading and display. This file provides the data structures for managing attendance records and late employee information in a Flutter application using the BLoC pattern.",
      "class_diagram": "@startuml\nclass AttendanceState {\n  <<abstract>>\n}\n\nclass AttendanceInitial extends AttendanceState\nclass AttendanceLoading extends AttendanceState\nclass AttendanceLoaded extends AttendanceState {\n  +attendanceByDate: Map<DateTime, List<AttendanceRecord>>\n  +lateEmployees: List<LateEmployee>\n}\nclass AttendanceError extends AttendanceState {\n  +message: String\n}\n\nclass AttendanceRecord {\n  +employeeId: String\n  +employeeName: String\n  +date: DateTime\n  +checkInTime: TimeOfDay\n}\n\nclass LateEmployee {\n  +employeeId: String\n  +employeeName: String\n  +date: DateTime\n  +checkInTime: TimeOfDay\n  +standardTime: TimeOfDay\n}\n\nAttendanceState <|-- AttendanceInitial\nAttendanceState <|-- AttendanceLoading\nAttendanceState <|-- AttendanceLoaded\nAttendanceState <|-- AttendanceError\n@enduml",
      "methods": [
        {
          "name": "props",
          "description": "Provides Equatable properties for state comparison in Flutter BLoC pattern",
          "parameters": null,
          "return_type": "List<Object?>"
        }
      ],
      "dependencies": [
        "package:equatable/equatable.dart"
      ]
    },
    {
      "name": "lib/features/attendance/attendance_view.dart",
      "description": "This file provides the user interface for the attendance tracking feature. It displays attendance records imported from Excel files, shows late arrival reports, and allows users to import new data. The view handles different states like loading, error, and loaded data through Bloc state management.",
      "class_diagram": "@startuml\nclass AttendanceView {\n  +Widget build(BuildContext context)\n}\n\nclass AttendancePage {\n  +Widget build(BuildContext context)\n  -Widget _buildInitialView(BuildContext context)\n  -Widget _buildAttendanceView(BuildContext context, AttendanceLoaded state)\n  -Widget _buildAttendanceList(BuildContext context, Map<DateTime, List<AttendanceRecord>> attendanceByDate)\n  -Widget _buildLateList(BuildContext context, List<LateEmployee> lateEmployees)\n  -Widget _buildErrorView(BuildContext context, AttendanceError state)\n}\n\nAttendanceView --> AttendancePage : creates\nAttendancePage --> AttendanceCubit : uses\nAttendancePage --> AttendanceState : observes states\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Main build method that sets up the attendance tracking UI with BlocProvider and Scaffold structure",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildInitialView",
          "description": "Creates the initial screen view with instructions and import options when no data is loaded",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildAttendanceView",
          "description": "Builds the main attendance display with tab navigation between attendance records and late reports",
          "parameters": [
            "BuildContext context",
            "AttendanceLoaded state"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildAttendanceList",
          "description": "Displays attendance records grouped by date with visual indicators for punctuality",
          "parameters": [
            "BuildContext context",
            "Map<DateTime, List<AttendanceRecord>> attendanceByDate"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildLateList",
          "description": "Shows a list of employees who arrived late with their check-in times",
          "parameters": [
            "BuildContext context",
            "List<LateEmployee> lateEmployees"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildErrorView",
          "description": "Displays error messages and recovery options when data loading fails",
          "parameters": [
            "BuildContext context",
            "AttendanceError state"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter_bloc/flutter_bloc.dart",
        "package:my_app/features/attendance/attendance_cubit.dart",
        "package:my_app/features/attendance/attendance_state.dart",
        "package:my_app/shared/app_colors.dart",
        "package:my_app/shared/text_style.dart"
      ]
    },
    {
      "name": "lib/features/attendance/attendance_cubit.dart",
      "description": "This file contains the AttendanceCubit, which is responsible for managing attendance data from Excel files. It handles parsing Excel data, identifying late arrivals, and managing the state of attendance information. The cubit integrates with Flutter BLoC for state management and uses the excel package for file parsing.",
      "class_diagram": "@startuml\nclass AttendanceCubit {\n+TimeOfDay standardWorkTime\n+pickAndImportExcel()\n+loadSampleData()\n-_parseExcelData(Excel excel)\n-_parseDate(String dateStr)\n-_parseTime(String timeStr)\n-_identifyLateArrivals(Map<DateTime, List<AttendanceRecord>> attendanceByDate)\n}\n\nAttendanceCubit --> \"uses\" Excel : <<import>>\nAttendanceCubit --> \"uses\" FilePicker : <<import>>\n@enduml",
      "methods": [
        {
          "name": "pickAndImportExcel",
          "description": "Allows users to pick and import an Excel file containing attendance data. Parses the file and identifies late arrivals.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "loadSampleData",
          "description": "Loads predefined sample attendance data for demonstration/testing purposes.",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "_parseExcelData",
          "description": "Parses Excel data into a structured format organized by date. Extracts employee information and check-in times.",
          "parameters": [
            "Excel excel"
          ],
          "return_type": "Map<DateTime, List<AttendanceRecord>>"
        },
        {
          "name": "_identifyLateArrivals",
          "description": "Analyzes attendance records to identify employees who arrived after the standard work time.",
          "parameters": [
            "Map<DateTime, List<AttendanceRecord>> attendanceByDate"
          ],
          "return_type": "List<LateEmployee>"
        }
      ],
      "dependencies": [
        "flutter_bloc",
        "file_picker",
        "excel",
        "my_app/features/attendance/attendance_state.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "flutter_bloc",
      "version": "^8.1.3",
      "purpose": "State management using Bloc/Cubit pattern"
    },
    {
      "name": "equatable",
      "version": "^2.0.5",
      "purpose": "Efficient state comparison for Bloc states"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant App\nparticipant StartupView\nparticipant AttendanceView\nparticipant AttendanceCubit\nparticipant AttendanceState\n\nUser -> App: Launch App\nApp -> StartupView: Initialize\nStartupView -> AttendanceView: Navigate\nAttendanceView -> AttendanceCubit: Create Cubit\nUser -> AttendanceView: Import Excel\nAttendanceCubit -> AttendanceCubit: Parse Excel Data\nAttendanceCubit -> AttendanceState: Emit AttendanceLoaded\nAttendanceState -> AttendanceView: Update UI\n@enduml",
  "state_management_flow": "State management is implemented using the Flutter Bloc/Cubit pattern with AttendanceCubit managing complex attendance data states. The cubit handles Excel file parsing, late arrival identification, and emits different states (Initial, Loading, Loaded, Error) using Equatable for efficient state comparisons. BlocBuilder enables reactive UI updates based on state changes.",
  "navigation_flow": "Navigation uses standard Flutter navigation with Navigator, featuring an automatic transition from StartupView to AttendanceView. The navigation flow supports state-driven routing, with the ability to display different views based on the current AttendanceState, including initial view, loaded data view, and error handling screens."
}